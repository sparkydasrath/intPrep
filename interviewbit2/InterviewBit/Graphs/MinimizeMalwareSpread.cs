using System;
using System.Linq;

namespace Graphs
{
    public class MinimizeMalwareSpread
    {
        /*
         924. Minimize Malware Spread
            Hard

            In a network of nodes, each node i is directly connected to another node j if and only if graph[i][j] = 1.

            Some nodes initial are initially infected by malware.  Whenever two nodes are directly connected and at least one of those two nodes is infected by malware, both nodes will be infected by malware.  This spread of malware will continue until no more nodes can be infected in this manner.

            Suppose M(initial) is the final number of nodes infected with malware in the entire network, after the spread of malware stops.

            We will remove one node from the initial list.  Return the node that if removed, would minimize M(initial).  If multiple nodes could be removed to minimize M(initial), return such a node with the smallest index.

            Note that if a node was removed from the initial list of infected nodes, it may still be infected later as a result of the malware spread.

            Example 1:

            Input: graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
            Output: 0

            Example 2:

            Input: graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
            Output: 0

            Example 3:

            Input: graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
            Output: 1

            Note:

                1 < graph.length = graph[0].length <= 300
                0 <= graph[i][j] == graph[j][i] <= 1
                graph[i][i] = 1
                1 <= initial.length < graph.length
                0 <= initial[i] < graph.length

         */

        public int MinMalwareSpread(int[,] graph, int[] initial)
        {
            // 1. Color each component. colors[node] = the color of this node.

            int graphLength = graph.GetLength(0);
            int[] colors = Enumerable.Repeat(-1, graphLength).ToArray();
            int col = 0;

            for (int node = 0; node < graphLength; ++node)
                if (colors[node] == -1)
                    Dfs(graph, colors, node, col++);

            // 2. Size of each color.
            int[] size = new int[col];
            foreach (int color in colors)
                size[color]++;

            // 3. Find unique colors.
            int[] colorCount = new int[col];
            foreach (int node in initial)
                colorCount[colors[node]]++;

            // 4. Answer
            int ans = int.MaxValue;
            foreach (int node in initial)
            {
                int c = colors[node];
                if (colorCount[c] == 1)
                {
                    if (ans == int.MaxValue)
                        ans = node;
                    else if (size[c] > size[colors[ans]])
                        ans = node;
                    else if (size[c] == size[colors[ans]] && node < ans)
                        ans = node;
                }
            }

            if (ans == int.MaxValue)
                foreach (int node in initial)
                    ans = Math.Min(ans, node);

            return ans;
        }

        private void Dfs(int[,] graph, int[] colors, int node, int color)
        {
            colors[node] = color;
            for (int nei = 0; nei < graph.GetLength(1); ++nei)
                if (graph[node, nei] == 1 && colors[nei] == -1)
                    Dfs(graph, colors, nei, color);
        }
    }
}